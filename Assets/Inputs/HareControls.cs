//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Inputs/HareControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @HareControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @HareControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""HareControls"",
    ""maps"": [
        {
            ""name"": ""HareMovement"",
            ""id"": ""b99f8362-8506-4bad-a3e5-01fae2485b07"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""0e4d37cd-c57f-4d6f-ad12-8d33d93ff568"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""1b1fb753-0b8d-4589-8b28-d117487753e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5570fc35-119e-49b4-9e6d-a9953ba4cad7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d9abf352-694a-40c9-8a25-e8b4d354e3b1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""26fd492f-80ef-44a7-9a25-ea2f597ba3fd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""26632745-14d6-4e28-925a-54f620d37e7c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e8037940-6e3d-47dd-b7d0-76e15a73ed48"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6dde4b41-083a-4fad-b694-d2ea32271be0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // HareMovement
        m_HareMovement = asset.FindActionMap("HareMovement", throwIfNotFound: true);
        m_HareMovement_Movement = m_HareMovement.FindAction("Movement", throwIfNotFound: true);
        m_HareMovement_Jump = m_HareMovement.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // HareMovement
    private readonly InputActionMap m_HareMovement;
    private List<IHareMovementActions> m_HareMovementActionsCallbackInterfaces = new List<IHareMovementActions>();
    private readonly InputAction m_HareMovement_Movement;
    private readonly InputAction m_HareMovement_Jump;
    public struct HareMovementActions
    {
        private @HareControls m_Wrapper;
        public HareMovementActions(@HareControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_HareMovement_Movement;
        public InputAction @Jump => m_Wrapper.m_HareMovement_Jump;
        public InputActionMap Get() { return m_Wrapper.m_HareMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HareMovementActions set) { return set.Get(); }
        public void AddCallbacks(IHareMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_HareMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HareMovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IHareMovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IHareMovementActions instance)
        {
            if (m_Wrapper.m_HareMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHareMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_HareMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HareMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HareMovementActions @HareMovement => new HareMovementActions(this);
    public interface IHareMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
